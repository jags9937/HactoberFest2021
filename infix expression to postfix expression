#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct stack
{
    int top;
    int size;
    char *arr;
};
int isEmpty(struct stack *s)
{
    if (s->top==-1)
    {
         return 1;
    }
    else
    {
        return 0;
    }
    
}
int isFull(struct stack *s)
{
    if (s->top+1>=s->size)
    {
         return 1;
    }
    else
    {
        return 0;
    }
    
}
void push(struct stack *s,char value)
{
    if (isFull(s))
    {
        printf("stack overflow");
    }
    else
    {
        s->top++;
        s->arr[s->top]=value;
    }

    
    
}
char pop(struct stack *s)
{
    if (isEmpty(s))
    {
         printf("stack underflow");
    }
    else
   {
       char data=s->arr[s->top];
       s->top--;
       return data;
   }
    
}
int isoperator(char ch)
{
    if (ch=='+'|| ch=='-' || ch=='*' || ch=='/' || ch=='^')
    {
         return 1;
    }
    else
    {
        return 0;
    }
    
}
int presendence(char ch)
{
    if (ch=='^')
    {
         return 3;
    }
    else if (ch=='*'||ch=='/')
    {
         return 2;
    }
    else if (ch=='+'||ch=='-')
    {
         return 1;
    }
    else
    {
        return 0;
    }
}
char stacktop(struct stack *sp)
{
    return sp->arr[sp->top];
}
char *infixtopostfix(char *exp)
{
    struct stack *sp=(struct stack *)malloc(sizeof(struct stack));
    sp->top=-1;
    sp->size=100;
    sp->arr=(char *)malloc(sp->size*sizeof(char));
    char *postfix=(char *)malloc(strlen((exp)+1)*sizeof(char));
    int i=0;
    int j=0;
    while (exp[i]!='\0')
    {
         if (!isoperator(exp[i]))
         {
             postfix[j]=exp[i];
             i++;
             j++;
         }
         else
         {
             if (presendence(exp[i])>presendence(stacktop(sp)))
             {
                  push(sp,exp[i]);
                  i++;
             }
             else
             {
                 postfix[j]=pop(sp);
                 j++;
             }
             
         }
         
    }
    while (!isEmpty(sp))
    {
         postfix[j]=pop(sp);
         j++;
    }
    postfix[j]='\0';
    return postfix;
    
    
}
void main ()
{
    char *exp="x/y+f*c-d";
    printf("postfix expression of exp is %s",infixtopostfix(exp));
    
}
